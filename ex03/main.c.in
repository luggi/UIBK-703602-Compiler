/* Authors:
 * - Huber Lukas
 * - Alexander Hirsch
 * - Patrick Ober
 * - Michael Tscholl
 * - Franz Josef Haider
 */

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#include "lexer.h"
#include "tokens.h"

/* compares `expect` with next token, calls `exit()` on missmatch */
void expect(const enum token expect) {
    enum token read = yylex();
    if (read != expect) {
        fprintf(stderr, "Error in %d: read '%s', expected '%s'\n",
                yylineno, token_string(read), token_string(expect));
        exit(EXIT_FAILURE);
    }
}

/* print error message and exit */
void no_match(const enum token t) {
    fprintf(stderr, "Error in %d: unexpected token '%s'\n", yylineno,
            token_string(t));
    exit(EXIT_FAILURE);
}

/* rules */
{% for name in RULES %}
void {{name}}(void);
{% endfor %}

{% for name, options in RULES.iteritems() %}
void {{name}}(void) {
    enum token t = yylex();
    switch(t) {
        {%- for line in options if line != '' %}
            {%- for word in line.split(' ') %}
                {%- if loop.first %}
                    case {{word}}:
                {%- else %}
                    {%- if word in TOKENS %}
                        expect({{word}});
                    {%- else %}
                        {{word}}();
                    {%- endif %}
                {%- endif %}
            {%- endfor %}
            break;
        {%- endfor %}

        {%- if '' in options %}
        default:
            no_match(t);
        {%- else %}
        default:
            break;
        {%- endif %}
    }
}
{% endfor %}

int main(int argc, char *argv[]) {

    start();

    return EXIT_SUCCESS;
}
